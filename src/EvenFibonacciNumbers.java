/**
 *  From Project Euler:
 *  Problem 2: Even Fibonacci numbers
 *
 *  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 *  first 10 terms will be:
 *      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 *  even-valued terms.
 *
 *  I choose this problem to get more of a handle on the difficulty of Project Euler problems beyond the difficulty. I
 *  wrote up my initial brute force solution and itseemed fast enough to not need optimization.
 *
 *  Time taken: 30 minutes
 *
 */
public class EvenFibonacciNumbers {

    public static void main(String[] args){
        int high = 4000000;

        long start = System.currentTimeMillis();
        long sum = evenFibsSum(high);
        long end = System.currentTimeMillis();
        long time = end-start;
        System.out.println("The sum of all even fibbonacci numbers smaller than " + high + " is " + sum + ". It took " + time + "millis to calculate this.");
    }

    private static long evenFibsSum(int high) {
        long prevFib = 1;
        long currFib = 2;

        long sum = 0;
        while(currFib < high){
            if(currFib%2 == 0){
                sum+=currFib;
            }
            long temp = prevFib;
            prevFib = currFib;
            currFib += temp;
        }

        return sum;
    }
}
